/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/parochi/greeting-client/pkg/apis/parochi/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GreetingLister helps list Greetings.
// All objects returned here must be treated as read-only.
type GreetingLister interface {
	// List lists all Greetings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Greeting, err error)
	// Greetings returns an object that can list and get Greetings.
	Greetings(namespace string) GreetingNamespaceLister
	GreetingListerExpansion
}

// greetingLister implements the GreetingLister interface.
type greetingLister struct {
	indexer cache.Indexer
}

// NewGreetingLister returns a new GreetingLister.
func NewGreetingLister(indexer cache.Indexer) GreetingLister {
	return &greetingLister{indexer: indexer}
}

// List lists all Greetings in the indexer.
func (s *greetingLister) List(selector labels.Selector) (ret []*v1.Greeting, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Greeting))
	})
	return ret, err
}

// Greetings returns an object that can list and get Greetings.
func (s *greetingLister) Greetings(namespace string) GreetingNamespaceLister {
	return greetingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GreetingNamespaceLister helps list and get Greetings.
// All objects returned here must be treated as read-only.
type GreetingNamespaceLister interface {
	// List lists all Greetings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Greeting, err error)
	// Get retrieves the Greeting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Greeting, error)
	GreetingNamespaceListerExpansion
}

// greetingNamespaceLister implements the GreetingNamespaceLister
// interface.
type greetingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Greetings in the indexer for a given namespace.
func (s greetingNamespaceLister) List(selector labels.Selector) (ret []*v1.Greeting, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Greeting))
	})
	return ret, err
}

// Get retrieves the Greeting from the indexer for a given namespace and name.
func (s greetingNamespaceLister) Get(name string) (*v1.Greeting, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("greeting"), name)
	}
	return obj.(*v1.Greeting), nil
}
